// *
// * Erdmann & Freunde - Nutshell
// * BASE Contao Framework
// * erdmann-freunde.de/nutshell/
// *
// * Lizenziert unter MIT OPEN SOURCE
// *

//
// MIXINS/GENERAL
// --------------------------------------------------

// basic styles for lists used as navs
@mixin navigation() {
  ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }

  a {
    text-decoration: none;
  }
}

@mixin padding-default($padding: var(--base-spacing-unit)) {
  padding-left:  $padding;
  padding-right: $padding;
}

// make-row
@mixin make-row($total-columns: $grid-columns, $grid-gutter: var(--grid-gutter)) {
  display: grid;
  grid-template-columns: repeat($total-columns, 1fr);
  grid-column-gap: $grid-gutter;
  grid-auto-columns: 1fr;

  @supports not (display: grid) {
    display: flex;
    flex-wrap: wrap;
    margin-left: calc(-1 * var(--grid-gutter) / 2);
    margin-right: calc(-1 * var(--grid-gutter) / 2);
  }
}

// column-floating
@mixin column-floating() {
  grid-column: 1 / -1;

  @supports not(display: grid) {
    padding-left: var(--grid-gutter-half);
    padding-right: var(--grid-gutter-half);
  }
}

// make-column mixin
@mixin make-col($columns) {
  @include column-floating();

  grid-column: span $columns / span $columns;

  @supports not (display: grid) {
    width: percentage($columns/$grid-columns);
  }
}

// make-width mixin
// [1] fallback for browser that can't calculate
@mixin make-width($width, $align: auto) {
  $width-percentage: $width / $grid-columns * $wrapper-max;

  max-width: $width-percentage; //[1]
  max-width: calc(#{$width-percentage} - var(--grid-gutter));

  @if $align == auto or center {
    margin-left: auto;
    margin-right: auto;
  }

  @if $align == left {
    margin-left: 0;
    margin-right: auto;
  }

  @if $align == right {
    margin-right: 0;
    margin-left: auto;
  }
}

// make-offset
@mixin make-offset($width, $direction: left) {
  @warn 'make-offset() is deprecated. use make-start() instead.';
}

// make-start
@mixin make-start($start) {
  grid-column-start: $start;
}

// screen reader only
@mixin invisible {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}


// Functions
// function map-deep-get()
// function to get a value from a nested map, see _type.scss for usage
//
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

// function headings()
// function to generate headlines h1 – h6
//
// usage:
// #{headings()} { … } will result in
// h1, h2, … h6 { … }
// ---
// #{headings(2,4) { … } will result in
// h2,h3,h4 { … }
// ---
@function headings($first:1, $last:6) {
  @if $first == $last {
      @return 'h#{$first}';
  } @else {
      @return 'h#{$first},' + headings($first+1, $last);
  }
}
